'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableHP As HPDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("HP")) Is Nothing) Then
                Me.Tables.Add(New HPDataTable(ds.Tables("HP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HP As HPDataTable
        Get
            Return Me.tableHP
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("HP")) Is Nothing) Then
            Me.Tables.Add(New HPDataTable(ds.Tables("HP")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableHP = CType(Me.Tables("HP"),HPDataTable)
        If (Not (Me.tableHP) Is Nothing) Then
            Me.tableHP.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableHP = New HPDataTable
        Me.Tables.Add(Me.tableHP)
    End Sub
    
    Private Function ShouldSerializeHP() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub HPRowChangeEventHandler(ByVal sender As Object, ByVal e As HPRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAuthor As DataColumn
        
        Private columnChapter As DataColumn
        
        Private columnComplete As DataColumn
        
        Private columnCount As DataColumn
        
        Private columnCrossover As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnFolder As DataColumn
        
        Private columnInternet As DataColumn
        
        Private columnMatchUp As DataColumn
        
        Private columnTitle As DataColumn
        
        Friend Sub New()
            MyBase.New("HP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AuthorColumn As DataColumn
            Get
                Return Me.columnAuthor
            End Get
        End Property
        
        Friend ReadOnly Property ChapterColumn As DataColumn
            Get
                Return Me.columnChapter
            End Get
        End Property
        
        Friend ReadOnly Property CompleteColumn As DataColumn
            Get
                Return Me.columnComplete
            End Get
        End Property
        
        Friend ReadOnly Property CountColumn As DataColumn
            Get
                Return Me.columnCount
            End Get
        End Property
        
        Friend ReadOnly Property CrossoverColumn As DataColumn
            Get
                Return Me.columnCrossover
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property FolderColumn As DataColumn
            Get
                Return Me.columnFolder
            End Get
        End Property
        
        Friend ReadOnly Property InternetColumn As DataColumn
            Get
                Return Me.columnInternet
            End Get
        End Property
        
        Friend ReadOnly Property MatchUpColumn As DataColumn
            Get
                Return Me.columnMatchUp
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HPRow
            Get
                Return CType(Me.Rows(index),HPRow)
            End Get
        End Property
        
        Public Event HPRowChanged As HPRowChangeEventHandler
        
        Public Event HPRowChanging As HPRowChangeEventHandler
        
        Public Event HPRowDeleted As HPRowChangeEventHandler
        
        Public Event HPRowDeleting As HPRowChangeEventHandler
        
        Public Overloads Sub AddHPRow(ByVal row As HPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHPRow(ByVal Author As String, ByVal Chapter As String, ByVal Complete As Boolean, ByVal Count As Integer, ByVal Crossover As String, ByVal Description As String, ByVal Folder As String, ByVal Internet As String, ByVal MatchUp As String, ByVal Title As String) As HPRow
            Dim rowHPRow As HPRow = CType(Me.NewRow,HPRow)
            rowHPRow.ItemArray = New Object() {Author, Chapter, Complete, Count, Crossover, Description, Folder, Internet, MatchUp, Title}
            Me.Rows.Add(rowHPRow)
            Return rowHPRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HPDataTable = CType(MyBase.Clone,HPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAuthor = Me.Columns("Author")
            Me.columnChapter = Me.Columns("Chapter")
            Me.columnComplete = Me.Columns("Complete")
            Me.columnCount = Me.Columns("Count")
            Me.columnCrossover = Me.Columns("Crossover")
            Me.columnDescription = Me.Columns("Description")
            Me.columnFolder = Me.Columns("Folder")
            Me.columnInternet = Me.Columns("Internet")
            Me.columnMatchUp = Me.Columns("MatchUp")
            Me.columnTitle = Me.Columns("Title")
        End Sub
        
        Private Sub InitClass()
            Me.columnAuthor = New DataColumn("Author", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAuthor)
            Me.columnChapter = New DataColumn("Chapter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChapter)
            Me.columnComplete = New DataColumn("Complete", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComplete)
            Me.columnCount = New DataColumn("Count", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCount)
            Me.columnCrossover = New DataColumn("Crossover", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCrossover)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnFolder = New DataColumn("Folder", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFolder)
            Me.columnInternet = New DataColumn("Internet", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInternet)
            Me.columnMatchUp = New DataColumn("MatchUp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMatchUp)
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitle)
        End Sub
        
        Public Function NewHPRow() As HPRow
            Return CType(Me.NewRow,HPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HPRowChangedEvent) Is Nothing) Then
                RaiseEvent HPRowChanged(Me, New HPRowChangeEvent(CType(e.Row,HPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HPRowChangingEvent) Is Nothing) Then
                RaiseEvent HPRowChanging(Me, New HPRowChangeEvent(CType(e.Row,HPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HPRowDeletedEvent) Is Nothing) Then
                RaiseEvent HPRowDeleted(Me, New HPRowChangeEvent(CType(e.Row,HPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HPRowDeletingEvent) Is Nothing) Then
                RaiseEvent HPRowDeleting(Me, New HPRowChangeEvent(CType(e.Row,HPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHPRow(ByVal row As HPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HPRow
        Inherits DataRow
        
        Private tableHP As HPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHP = CType(Me.Table,HPDataTable)
        End Sub
        
        Public Property Author As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.AuthorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.AuthorColumn) = value
            End Set
        End Property
        
        Public Property Chapter As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.ChapterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.ChapterColumn) = value
            End Set
        End Property
        
        Public Property Complete As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableHP.CompleteColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.CompleteColumn) = value
            End Set
        End Property
        
        Public Property Count As Integer
            Get
                Try 
                    Return CType(Me(Me.tableHP.CountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.CountColumn) = value
            End Set
        End Property
        
        Public Property Crossover As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.CrossoverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.CrossoverColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Folder As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.FolderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.FolderColumn) = value
            End Set
        End Property
        
        Public Property Internet As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.InternetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.InternetColumn) = value
            End Set
        End Property
        
        Public Property MatchUp As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.MatchUpColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.MatchUpColumn) = value
            End Set
        End Property
        
        Public Property Title As String
            Get
                Try 
                    Return CType(Me(Me.tableHP.TitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHP.TitleColumn) = value
            End Set
        End Property
        
        Public Function IsAuthorNull() As Boolean
            Return Me.IsNull(Me.tableHP.AuthorColumn)
        End Function
        
        Public Sub SetAuthorNull()
            Me(Me.tableHP.AuthorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChapterNull() As Boolean
            Return Me.IsNull(Me.tableHP.ChapterColumn)
        End Function
        
        Public Sub SetChapterNull()
            Me(Me.tableHP.ChapterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompleteNull() As Boolean
            Return Me.IsNull(Me.tableHP.CompleteColumn)
        End Function
        
        Public Sub SetCompleteNull()
            Me(Me.tableHP.CompleteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountNull() As Boolean
            Return Me.IsNull(Me.tableHP.CountColumn)
        End Function
        
        Public Sub SetCountNull()
            Me(Me.tableHP.CountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCrossoverNull() As Boolean
            Return Me.IsNull(Me.tableHP.CrossoverColumn)
        End Function
        
        Public Sub SetCrossoverNull()
            Me(Me.tableHP.CrossoverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableHP.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableHP.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFolderNull() As Boolean
            Return Me.IsNull(Me.tableHP.FolderColumn)
        End Function
        
        Public Sub SetFolderNull()
            Me(Me.tableHP.FolderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInternetNull() As Boolean
            Return Me.IsNull(Me.tableHP.InternetColumn)
        End Function
        
        Public Sub SetInternetNull()
            Me(Me.tableHP.InternetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMatchUpNull() As Boolean
            Return Me.IsNull(Me.tableHP.MatchUpColumn)
        End Function
        
        Public Sub SetMatchUpNull()
            Me(Me.tableHP.MatchUpColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tableHP.TitleColumn)
        End Function
        
        Public Sub SetTitleNull()
            Me(Me.tableHP.TitleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
